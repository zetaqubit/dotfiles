" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc
" This config is adapted from https://github.com/tsillus/nvim/blob/master/.ideavimrc

set nocompatible

" Use ~/.vim/swapfiles/ for .swp
set directory=$HOME/.vim/swapfiles//

" Use C-d for Esc.
inoremap <C-d> <Esc>

" Change <Leader> to space
let mapleader = "\<Space>"

" --------------------- Plugins START ----------------------
" Enable IdeaVim plugins https://jb.gg/ideavim-plugins

" Enable which-key
set which-key
set notimeout

Plug 'tpope/vim-surround'
let g:WhichKeyDesc_Change = "c Change"
let g:WhichKeyDesc_ChangeSurround = "cs Change [S]urround"
let g:WhichKeyDesc_Delete = "d Delete"
let g:WhichKeyDesc_DeleteSurround = "ds Delete [S]urround"

" --------------------- Plugins END ----------------------

" -------- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
map <Leader>s <Action>(IdeaVim.ReloadVimRc.reload)

map <Leader>fr <Action>(RecentFiles)
map <D-e> <Action>(RecentFiles)

map <Leader>fs <Action>(FileStructurePopup)
map <D-s> <Action>(FileStructurePopup)

map <Leader>fd <Action>(GotoDeclaration)
map <D-k> <Action>(GotoDeclaration)

map <Leader>fu <Action>(CallHierarchy)
map <D-u> <Action>(CallHierarchy)

map <Leader>ft <Action>(GotoSymbol)
map <D-t> <Action>(GotoSymbol)

map - <Action>(Back)
map _ <Action>(Forward)

map <C-j> <action>(MoveLineDown)
map <C-k> <action>(MoveLineUp)


" [R]efactoring Code
let g:WhichKeyDesc_Refactor = "<leader>r Refactor Code"
let g:WhichKeyDesc_RefactorRename = "<leader>rr [R]ename Element"
map <leader>rr <Action>(RenameElement)
let g:WhichKeyDesc_RefactorVariable = "<leader>rv Introduce [V]ariable"
map <leader>rv <Action>(IntroduceVariable)
let g:WhichKeyDesc_RefactorInline = "<leader>rn I[n]line Variable"
map <leader>rn <Action>(Inline)
let g:WhichKeyDesc_RefactorFormat = "<leader>rf [F]ormat Code"
map <leader>rf <Action>(ReformatCode)
let g:WhichKeyDesc_RefactorParameter = "<leader>rp Introduce [P]arameter"
map <leader>rp <Action>(IntroduceParameter)
let g:WhichKeyDesc_RefactorMethod = "<leader>re Extract [M]ethod"
map <leader>re <Action>(ExtractMethod)
let g:WhichKeyDesc_RefactorMove = "<leader>rm [M]ove"
map <leader>rm <Action>(Move)
let g:WhichKeyDesc_RefactorSignature = "<leader>rs Change [S]ignature "
map <leader>rs <Action>(ChangeSignature)
let g:WhichKeyDesc_RefactorUppercase = "<leader>rU change [U]PPERCASE"
map <leader>rU viwU
let g:WhichKeyDesc_RefactorLowercase = "<leader>ru change [u]ppercase"
map <leader>ru viwu


" Sidebar management
let g:WhichKeyDesc_Window = "<leader>w Windows"
let g:WhichKeyDesc_WindowProject = "<leader>wp Open [P]roject Folder"
nmap <leader>wp :NERDTree<cr>
let g:WhichKeyDesc_WindowSelectOpen = "<leader>wo Select [O]pen File"
nmap <leader>wo <Action>(SelectInProjectView)
let g:WhichKeyDesc_WindowDebug = "<leader>wb open De[b]ug Window"
nmap <leader>wb <Action>(ActivateDebugToolWindow)
let g:WhichKeyDesc_WindowCommit = "<leader>wc open [C]ommit Window"
nmap <leader>wc <Action>(ActivateCommitToolWindow)
let g:WhichKeyDesc_WindowDatebase = "<leader>wd open [D]atabase Window"
nmap <leader>wd <Action>(ActivateDatabaseToolWindow)
let g:WhichKeyDesc_WindowStucture = "<leader>ws open [S]tructure Window"
nmap <leader>ws <Action>(ActivateStructureToolWindow)
let g:WhichKeyDesc_WindowTerminal = "<leader>wt open [T]erminal Window"
nmap <leader>wt <Action>(ActivateTerminalToolWindow)
let g:WhichKeyDesc_WindowGit = "<leader>wg open [G]it Window"
nmap <leader>wg <Action>(ActivateVersionControlToolWindow)
let g:WhichKeyDesc_WindowExecute = "<leader>wx open e[X]ecute Window"
nmap <leader>wx <Action>(ActivateRunToolWindow)
let g:WhichKeyDesc_WindowJump = "<leader>wj [J]ump to Bookmark"
nmap <leader>wj <Action>(ActivateBookmarksToolWindow)
let g:WhichKeyDesc_WindowQuickNotes = "<leader>wn open [N]otes"
nmap <leader>wn <Action>(ActivateQuickNotesToolWindow)

" [W]indow Activation
let g:WhichKeyDesc_WindowRecent = "<leader>wr open [R]ecent File"
nmap <leader>wr <Action>(RecentFiles)
let g:WhichKeyDesc_WindowFind = "<leader>wf [F]ind Everywhere"
nmap <leader>wf <Action>(SearchEverywhere)


" [J]ump to Bookmarks
let g:WhichKeyDesc_Jump = "<leader>j Jump to Bookmarks"
let g:WhichKeyDesc_JumpMnemonic = "<leader>jm Toggle Bookmark with [M]nemonic"
nmap <leader>jm <Action>(ToggleBookmarkWithMnemonic)
let g:WhichKeyDesc_JumpToggle = "<leader>jt [T]oggle Bookmark"
nmap <leader>jt <Action>(ToggleBookmark)
let g:WhichKeyDesc_JumpGoto = "<leader>jj [J]ump to Bookmark"
nmap <leader>jj <Action>(Bookmarks.Goto)


" [B]uffer Management
let g:WhichKeyDesc_Buffer = "<leader>b Buffer Management"
let g:WhichKeyDesc_BufferDelete = "<leader>bd [d]elete Buffer"
nmap <leader>bd <Action>(CloseContent)
let g:WhichKeyDesc_BufferDeleteUnpinned = "<leader>bD [D]elete ALL Unpinned Buffers"
nmap <leader>bD <Action>(CloseAllUnpinnedEditors)
let g:WhichKeyDesc_BufferSplitV = "<leader>bs [S]plit Buffer to the right"
nmap <leader>bs <Action>(SplitVertically)<C-h><Action>(CloseContent)<C-l>
let g:WhichKeyDesc_BufferMerge = "<leader>bm [M]erge Buffers"
nmap <leader>bm <Action>(Unsplit)
let g:WhichKeyDesc_BufferMove = "<leader>bo [M]ove Buffer to other side"
nmap <leader>bo <Action>(MoveEditorToOppositeTabGroup)
let g:WhichKeyDesc_BufferPin = "<leader>bp [P]in Buffer"
nmap <leader>bp <Action>(PinActiveEditorTab)

" -------- Map IDE actions to IdeaVim END

" Dvorak Movement Keys. g means go by screen (not physical) line
noremap h h
noremap t j
noremap n k
noremap s l
noremap gt gj
noremap gn gk

" Back and forward in jump list
" noremap <silent> - <C-o>
" noremap <silent> _ <C-i>

" Page down and page up
"noremap T <C-f>
"noremap N <C-b>

" Half page down and half page up
noremap T <C-d>
noremap N <C-u>

" C-t to scroll down a line, C-n to scroll up a line
"noremap <C-t> <C-e>
"noremap <C-n> <C-y>

" Fix j, k, n, and s displaced by movement keys
noremap l s
noremap L S
noremap j n
noremap k N

" Set ENTER to insert newline in command mode
"noremap <CR> i<CR><Esc>

" Easy access to begin and end. g means go by screen (not physical) line
noremap H ^
noremap S $

" CTRL-K for descend into tag
" noremap <C-j> <C-]>
" noremap <C-k> <C-]>

" Set max number of open tabs to 50
set tabpagemax=50

" Changing tabs
"noremap <C-h> gT
"noremap <C-s> gt

" Changing windows
nnoremap <M-h> <C-w>h
nnoremap <M-s> <C-w>l
nnoremap <M-t> <C-w>j
nnoremap <M-n> <C-w>k

" Open and navigate quickfix results
noremap <Leader>q :cope<CR>
noremap <Leader>n :cn<CR>
noremap <Leader>p :cp<CR>

" Go backwards and forwards in jumplist
"noremap <C-b> <C-o>
"noremap <C-m> <C-i>

" Buffer management
"set switchbuf=usetab,newtab

" Use two semicolons for esc
":imap ;;  <Esc>
":set timeoutlen=300

" Turn line numbering on
set nu
set relativenumber

" Keep 4-line margin at top and bot of screen.
set scrolloff=4

" Change the background color of the cursor's line number.
set cursorline
highlight CursorLineNr term=bold ctermbg=Red ctermfg=Yellow

" Disable underlining the cursor line itself.
highlight CursorLine term=NONE cterm=NONE

" Change the search highlight color.
highlight Search term=reverse cterm=reverse ctermbg=black ctermfg=yellow

" Change the visual mode color.
highlight Visual term=reverse cterm=reverse ctermbg=black

" Turn autoindent on
set ai

" Set up file-type dependent indent
filetype indent on

" Turn syntax highlighting on
syntax on

" Configure tab behavior
set smartindent
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction

function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction

" Search tweaks
set incsearch
set ignorecase
set smartcase
set hlsearch

" Fix file completion
set wildmenu
set wildmode=longest:full

" Allow the mouse to move cursor
" set mouse=a

" Allow switching buffers when dirty.
set hidden

" Enable visual word wrap (no EOLs inserted into actual file)
set linebreak

set wrap

" Swap ; and :  Convenient.
noremap : ;
noremap ; :

" Press F3 to toggle automatic word wrapping
"noremap <F3> :set wm=2<CR>

" Press F4 to toggle highlighting on/off, and show current value.
"noremap <F4> :set hlsearch! hlsearch?<CR>

" Map CTRL-A to toggle spell checking
"noremap <C-a> :set spell! spell?<CR>
"noremap <C-j> [s
"noremap <C-k> ]s
"noremap <C-x> z=

" Press comma to turn off highlighting and clear any message already displayed.
" nnoremap <silent> , :nohlsearch<Bar>:echo<CR>

" Make man page appear in a vim window using :Man command
runtime! ftplugin/man.vim

" Sudo write current file
"cmap W w !sudo tee >/dev/null %

" Compile current file
"noremap , :!pdflatex %<CR>

" Open pdf of current file
"noremap \ :!open %<.pdf<CR>

" Show status line at the bottom of the screen
set ruler
set rulerformat=%50(%=%n\:%f%m%r%w\ %l,%c%V\ %P%)

" Correct vimdiff color scheme when using dark background
hi DiffAdd term=reverse cterm=bold ctermbg=green ctermfg=black
hi DiffChange term=reverse cterm=bold ctermbg=cyan ctermfg=black
hi DiffText term=reverse  cterm=bold ctermbg=yellow ctermfg=black
hi DiffDelete term=reverse cterm=bold ctermbg=red ctermfg=black

"syntax enable
"set background=light
"let g:solarized_termcolors=256
"colorscheme solarized

"let g:rehash256 = 1
"colorscheme molokai


" Make diff always split vertically.
set diffopt=vertical

" Map F1 to toggle paste mode
noremap <F1> :set invpaste paste?<CR>
set pastetoggle=<F1>
set showmode

" Make it easy to edit and source vimrc
"noremap <Leader>s :source ~/.vimrc<CR>
"noremap <Leader>v :e ~/.vimrc<CR>
"noremap <Leader>V :e ~/.vimrc_google<CR>

" Grep files in quick fix
noremap <Leader>gr :grep --exclude-dir=scons-out -nir '

" Make highlighting reverse the text color
"hi Visual ctermbg=NONE cterm=reverse
"hi Search ctermbg=NONE cterm=reverse
"hi SpellBad ctermbg=NONE cterm=reverse
"hi MatchParen ctermbg=black cterm=None

" Fix the omni complete menu color
hi Pmenu ctermbg=lightgray
hi PmenuSel ctermbg=lightyellow

" Show the command that you're currently typing
" set showcmd

" Set title
set title

" Remap keys in NerdTree
let g:NERDTreeMapOpenInTab='e'
let g:NERDTreeMapOpenInTabSilent='E'
let g:NERDTreeMapOpenExpl='~'

let g:NERDTreeDirArrows=0
let g:NERDTreeMinimalUI=1


" Make Command-T open file in a new tab by default
"let g:CommandTAcceptSelectionMap = '<CR>'
"nnoremap <silent> <Leader>o :CommandT<CR>

" Unbind open selection in tab.
let g:CommandTAcceptSelectionTabMap = ''

" Make Command-t recursively search from the current directory rather than git
" root
let g:CommandTTraverseSCM="pwd"

let g:CommandTFileScanner="find"


" Open the corresponding .cc file from a .h file.
noremap <Leader>c :edit %:p:s?\.h$?.cc?<CR>

" Open the corresponding .h file from a .cc file.
noremap <Leader>h :edit %:p:s?\.cc$?.h?<CR>

" Ignore object and class files when doing file expansion.
set wildignore+=*.o,*~,*.class,*.pyc,scons-out

" Set up file-type dependent indent
filetype indent on

highlight ColorColumn ctermbg=lightcyan

" 80-char margin for cpp files.
filetype on
autocmd FileType cpp setlocal colorcolumn=81

" Automatically refresh buffer from file.
set autoread

" Refresh all open buffers from files.
noremap <leader>a :checktime<CR>

" Highlight occurrences of the current word
"noremap <Leader>, :silent! exe printf('match IncSearch /\<%s\>/', expand('<cword>'))<CR>

" Set 256 colors
set t_Co=256

"------ Epilogue scripts

" Make vp not replace paste buffer, allowing for multiple pastes
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()

if (filereadable(glob('~/.vimrc_local')))
   source ~/.vimrc_local
endif
